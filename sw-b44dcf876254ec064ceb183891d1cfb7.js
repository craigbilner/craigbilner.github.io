function cacheOpen(e,o){return function(t){return t.put(e.request,o.clone()),o}}function fetchSuccess(e){return function(o){return caches.open("v1").then(cacheOpen(e,o))}}function noCache(e){return function(){return fetch(e.request).then(fetchSuccess(e))}}function noCacheFail(){console.error("no cache fail")}function getFallbackFromCache(e,o,t){console.log("getFallbackFromCache"),logDebug("Fetching from fallback url: "+t.fallbackURL+"for url: "+e.url);var c=new Request(t.fallbackURL,e);return toolbox.cacheFirst(c,o,t).then(function(e){return e?(logDebug("Got fallback response from cache",e),e):void 0})}function fallbackResponse(e,o,t){return console.log("fallbackResponse"),logDebug("Looking for fallback for:",e.url),new Promise(function(c,n){toolbox.networkFirst(e,o,t).then(function(n){n?c(n):(logDebug("Network first returned no response, calling fallback from cache."),getFallbackFromCache(e,o,t).then(c)["catch"](function(e){logDebug("Fallback failed with:",e)}))})["catch"](function(n){logDebug("Network first returned err, calling fallback from cache:",n),getFallbackFromCache(e,o,t).then(c)["catch"](function(e){logDebug("Fallback2 failed with:",e)})})})}function logDebug(){toolbox.options.debug&&console.log(arguments)}importScripts("sw-toolbox-d61b8f9f071464c8cae92842a9b2db63.js");var CACHE_PREFIX="brocsw-v",CACHE_VERSION=CACHE_PREFIX+"1451163765975";toolbox.options.cache.name=CACHE_VERSION;var urlsToPrefetch=["/","assets/blog-c0a73a052c18e6f91c5dbe9e082950c1.css","assets/blog-472dddaa2151ce29d49824bf3e5b42e1.js","assets/vendor-d41d8cd98f00b204e9800998ecf8427e.css","assets/vendor-75d2a9f07b934c0d7e3e778be0827ac6.js","crossdomain.xml","index.html","robots.txt","vendor/Museo_Slab_500_2-webfont.woff","vendor/Museo_Slab_500_2-webfont.woff2"];urlsToPrefetch.forEach(function(e){toolbox.router.any(e,toolbox.cacheFirst)}),toolbox.precache(urlsToPrefetch),this.addEventListener("fetch",function(e){e.respondWith(caches.match(e.request)["catch"](noCache(e))["catch"](noCacheFail))}),self.addEventListener("activate",function(e){logDebug("Deleting out of date caches, current cache version:",CACHE_VERSION),e.waitUntil(caches.keys().then(function(e){return Promise.all(e.filter(function(e){return-1===e.indexOf("$$$inactive$$$")&&0===e.indexOf(CACHE_PREFIX)&&e!==CACHE_VERSION}).map(function(e){return logDebug("Deleting out of date cache:",e),caches["delete"](e)}))}))});